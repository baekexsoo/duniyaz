/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { AngularPaginatorService } from './services/angular-paginator.service';
/**
 * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
 */
var AngularPaginatorComponent = /** @class */ (function () {
    /**
     *
     * @param _angularPaginatorService service for angular paginator
     */
    function AngularPaginatorComponent(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
        /**
         * Whether to display First / Last buttons
         */
        this.boundaryLinks = false;
        /**
         * Whether to display Previous / Next buttons
         */
        this.directionLinks = true;
        /**
         * Limit number for pagination size, i.e., the maximum page numbers to be displayed
         */
        this.maxSize = 5;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = true;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        /**
         * Text for first button
         */
        this.firstText = 'First';
        /**
         * Text for previous button
         */
        this.previousText = 'Previous';
        /**
         * Text for next button
         */
        this.nextText = 'Next';
        /**
         * Text for last button
         */
        this.lastText = 'Last';
        /**
         * Screen reader text for first button
         */
        this.screenReaderFirstText = 'First';
        /**
         * Screen reader text for previous button
         */
        this.screenReaderPreviousText = 'Previous';
        /**
         * Screen reader text for next button
         */
        this.screenReaderNextText = 'Next';
        /**
         * Screen reader text for lasr button
         */
        this.screenReaderLastText = 'Last';
        /**
         * Screen reader text for page numbers
         */
        this.screenReaderPageText = 'Page';
        /**
         * Screen reader text for current page
         */
        this.screenReaderCurrentPageText = 'You`re on page';
        /**
         * Screen reader text for the pagination component
         */
        this.screenReaderPaginationLabel = 'Pagination';
        /**
         * Hides the pagination component if the items are less than `itemsPerPage`
         */
        this.autoHide = false;
        /**
         * disables pagination component
         */
        this.disabled = false;
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         *
         * This event is originally picked up from `AngularPaginatorDirective`
         */
        this.pageChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AngularPaginatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // set default id if not provided
        this.id = this.id ? this.id : this._angularPaginatorService.id;
        // set default class if not provided
        this.className = this.className ? this.className : this._angularPaginatorService.id;
    };
    AngularPaginatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-angular-paginator',
                    template: "<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</appAngularPaginator>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
                }] }
    ];
    /** @nocollapse */
    AngularPaginatorComponent.ctorParameters = function () { return [
        { type: AngularPaginatorService }
    ]; };
    AngularPaginatorComponent.propDecorators = {
        boundaryLinks: [{ type: Input }],
        directionLinks: [{ type: Input }],
        maxSize: [{ type: Input }],
        rotate: [{ type: Input }],
        boundaryLinkNumbers: [{ type: Input }],
        forceEllipses: [{ type: Input }],
        id: [{ type: Input }],
        firstText: [{ type: Input }],
        previousText: [{ type: Input }],
        nextText: [{ type: Input }],
        lastText: [{ type: Input }],
        screenReaderFirstText: [{ type: Input }],
        screenReaderPreviousText: [{ type: Input }],
        screenReaderNextText: [{ type: Input }],
        screenReaderLastText: [{ type: Input }],
        screenReaderPageText: [{ type: Input }],
        screenReaderCurrentPageText: [{ type: Input }],
        screenReaderPaginationLabel: [{ type: Input }],
        className: [{ type: Input }],
        autoHide: [{ type: Input }],
        disabled: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return AngularPaginatorComponent;
}());
export { AngularPaginatorComponent };
if (false) {
    /**
     * Whether to display First / Last buttons
     * @type {?}
     */
    AngularPaginatorComponent.prototype.boundaryLinks;
    /**
     * Whether to display Previous / Next buttons
     * @type {?}
     */
    AngularPaginatorComponent.prototype.directionLinks;
    /**
     * Limit number for pagination size, i.e., the maximum page numbers to be displayed
     * @type {?}
     */
    AngularPaginatorComponent.prototype.maxSize;
    /**
     * Whether to keep current page in the middle of the visible ones
     * @type {?}
     */
    AngularPaginatorComponent.prototype.rotate;
    /**
     * Whether to always display the first and last page numbers.
     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
     * in-between as necessary. NOTE: max-size refers to the center of the range.
     * This option may add up to 2 more numbers on each side of the displayed range for the end value and
     * what would be an ellipsis but is replaced by a number because it is sequential
     * @type {?}
     */
    AngularPaginatorComponent.prototype.boundaryLinkNumbers;
    /**
     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
     * @type {?}
     */
    AngularPaginatorComponent.prototype.forceEllipses;
    /**
     * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.id;
    /**
     * Text for first button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.firstText;
    /**
     * Text for previous button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.previousText;
    /**
     * Text for next button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.nextText;
    /**
     * Text for last button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.lastText;
    /**
     * Screen reader text for first button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderFirstText;
    /**
     * Screen reader text for previous button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPreviousText;
    /**
     * Screen reader text for next button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderNextText;
    /**
     * Screen reader text for lasr button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderLastText;
    /**
     * Screen reader text for page numbers
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPageText;
    /**
     * Screen reader text for current page
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderCurrentPageText;
    /**
     * Screen reader text for the pagination component
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPaginationLabel;
    /**
     * Adds custom class to the pagination element
     * @type {?}
     */
    AngularPaginatorComponent.prototype.className;
    /**
     * Hides the pagination component if the items are less than `itemsPerPage`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.autoHide;
    /**
     * disables pagination component
     * @type {?}
     */
    AngularPaginatorComponent.prototype.disabled;
    /**
     * Emits an event whenever the current page is changed, It emits the current page number
     *
     * This event is originally picked up from `AngularPaginatorDirective`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.pageChange;
    /** @type {?} */
    AngularPaginatorComponent.prototype._angularPaginatorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wYWdpbmF0b3IvIiwic291cmNlcyI6WyJhcHAvYW5ndWxhci1wYWdpbmF0b3IvYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7OztJQThHN0U7OztPQUdHO0lBQ0gsbUNBQW9CLHdCQUFpRDtRQUFqRCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQXlCOzs7OzZCQWpHNUMsS0FBSzs7Ozs4QkFJSixJQUFJOzs7O3VCQUlYLENBQUM7Ozs7c0JBSUYsSUFBSTs7Ozs7Ozs7bUNBUVMsS0FBSzs7Ozs2QkFJWCxLQUFLOzs7O3lCQVFULE9BQU87Ozs7NEJBSUosVUFBVTs7Ozt3QkFJZCxNQUFNOzs7O3dCQUlOLE1BQU07Ozs7cUNBSU8sT0FBTzs7Ozt3Q0FJSixVQUFVOzs7O29DQUlkLE1BQU07Ozs7b0NBSU4sTUFBTTs7OztvQ0FJTixNQUFNOzs7OzJDQUlDLGdCQUFnQjs7OzsyQ0FJaEIsWUFBWTs7Ozt3QkFRL0IsS0FBSzs7Ozt3QkFJTCxLQUFLOzs7Ozs7MEJBT29CLElBQUksWUFBWSxFQUFVO0tBTUc7Ozs7SUFFMUUsNENBQVE7OztJQUFSOztRQUdFLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQzs7UUFHL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDO0tBQ3JGOztnQkF0SEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLGd5R0FBaUQ7b0JBRWpELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztpQkFDaEQ7Ozs7Z0JBVlEsdUJBQXVCOzs7Z0NBaUI3QixLQUFLO2lDQUlMLEtBQUs7MEJBSUwsS0FBSzt5QkFJTCxLQUFLO3NDQVFMLEtBQUs7Z0NBSUwsS0FBSztxQkFJTCxLQUFLOzRCQUlMLEtBQUs7K0JBSUwsS0FBSzsyQkFJTCxLQUFLOzJCQUlMLEtBQUs7d0NBSUwsS0FBSzsyQ0FJTCxLQUFLO3VDQUlMLEtBQUs7dUNBSUwsS0FBSzt1Q0FJTCxLQUFLOzhDQUlMLEtBQUs7OENBSUwsS0FBSzs0QkFJTCxLQUFLOzJCQUlMLEtBQUs7MkJBSUwsS0FBSzs2QkFPTCxNQUFNOztvQ0E3R1Q7O1NBYWEseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9hbmd1bGFyLXBhZ2luYXRvci5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IHRoYXQgcmVuZGVycyB0aGUgUGFnaW5hdGlvbiBjb21wb25lbnQgdGVtcGxhdGUsIEl0IGFsc28gYWNjZXB0cyB0aGUgaW5wdXRzIGZvciB0aGUgUGFnaW5hdGlvbiBjb21wb25lbnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWFuZ3VsYXItcGFnaW5hdG9yJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FuZ3VsYXItcGFnaW5hdG9yLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBBbmd1bGFyUGFnaW5hdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAvKipcbiAgICogV2hldGhlciB0byBkaXNwbGF5IEZpcnN0IC8gTGFzdCBidXR0b25zXG4gICAqL1xuICBASW5wdXQoKSBib3VuZGFyeUxpbmtzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRpc3BsYXkgUHJldmlvdXMgLyBOZXh0IGJ1dHRvbnNcbiAgICovXG4gIEBJbnB1dCgpIGRpcmVjdGlvbkxpbmtzID0gdHJ1ZTtcbiAgLyoqXG4gICAqIExpbWl0IG51bWJlciBmb3IgcGFnaW5hdGlvbiBzaXplLCBpLmUuLCB0aGUgbWF4aW11bSBwYWdlIG51bWJlcnMgdG8gYmUgZGlzcGxheWVkXG4gICAqL1xuICBASW5wdXQoKSBtYXhTaXplID0gNTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8ga2VlcCBjdXJyZW50IHBhZ2UgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdmlzaWJsZSBvbmVzXG4gICAqL1xuICBASW5wdXQoKSByb3RhdGUgPSB0cnVlO1xuICAvKipcbiAgICAqIFdoZXRoZXIgdG8gYWx3YXlzIGRpc3BsYXkgdGhlIGZpcnN0IGFuZCBsYXN0IHBhZ2UgbnVtYmVycy5cbiAgICAqIElmIG1heC1zaXplIGlzIHNtYWxsZXIgdGhhbiB0aGUgbnVtYmVyIG9mIHBhZ2VzLCB0aGVuIHRoZSBmaXJzdCBhbmQgbGFzdCBwYWdlIG51bWJlcnMgYXJlIHN0aWxsIHNob3duIHdpdGggZWxsaXBzZXNcbiAgICAqIGluLWJldHdlZW4gYXMgbmVjZXNzYXJ5LiBOT1RFOiBtYXgtc2l6ZSByZWZlcnMgdG8gdGhlIGNlbnRlciBvZiB0aGUgcmFuZ2UuXG4gICAgKiBUaGlzIG9wdGlvbiBtYXkgYWRkIHVwIHRvIDIgbW9yZSBudW1iZXJzIG9uIGVhY2ggc2lkZSBvZiB0aGUgZGlzcGxheWVkIHJhbmdlIGZvciB0aGUgZW5kIHZhbHVlIGFuZFxuICAgICogd2hhdCB3b3VsZCBiZSBhbiBlbGxpcHNpcyBidXQgaXMgcmVwbGFjZWQgYnkgYSBudW1iZXIgYmVjYXVzZSBpdCBpcyBzZXF1ZW50aWFsXG4gICAgKi9cbiAgQElucHV0KCkgYm91bmRhcnlMaW5rTnVtYmVycyA9IGZhbHNlO1xuICAvKipcbiAgICogQWxzbyBkaXNwbGF5cyBlbGxpcHNlcyB3aGVuIHJvdGF0ZSBpcyB0cnVlIGFuZCBtYXhTaXplIGlzIHNtYWxsZXIgdGhhbiB0aGUgbnVtYmVyIG9mIHBhZ2VzIGZvcmNlRWxsaXBzZXNcbiAgICovXG4gIEBJbnB1dCgpIGZvcmNlRWxsaXBzZXMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFVzZSB1bmlxdWUgaWQgd2hlbiBtdWx0aXBsZSBwYWdpbmF0aW9ucyBhcmUgYmVpbmcgdXNlZCBvbiB0aGUgc2FtZSBwYWdlLiBCeSBEZWZhdWx0IFBhZ2luYXRvciB1c2VzIGlkIGBBTkdVTEFSX1BBR0lOQVRPUl9ERUZBVUxUYFxuICAgKi9cbiAgQElucHV0KCkgaWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRleHQgZm9yIGZpcnN0IGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgZmlyc3RUZXh0ID0gJ0ZpcnN0JztcbiAgLyoqXG4gICAqIFRleHQgZm9yIHByZXZpb3VzIGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgcHJldmlvdXNUZXh0ID0gJ1ByZXZpb3VzJztcbiAgLyoqXG4gICAqIFRleHQgZm9yIG5leHQgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBuZXh0VGV4dCA9ICdOZXh0JztcbiAgLyoqXG4gICAqIFRleHQgZm9yIGxhc3QgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBsYXN0VGV4dCA9ICdMYXN0JztcbiAgLyoqXG4gICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgZmlyc3QgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJGaXJzdFRleHQgPSAnRmlyc3QnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIHByZXZpb3VzIGJ1dHRvblxuICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQcmV2aW91c1RleHQgPSAnUHJldmlvdXMnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIG5leHQgYnV0dG9uXG4gICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlck5leHRUZXh0ID0gJ05leHQnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIGxhc3IgYnV0dG9uXG4gICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlckxhc3RUZXh0ID0gJ0xhc3QnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIHBhZ2UgbnVtYmVyc1xuICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQYWdlVGV4dCA9ICdQYWdlJztcbiAgLyoqXG4gICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciBjdXJyZW50IHBhZ2VcbiAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyQ3VycmVudFBhZ2VUZXh0ID0gJ1lvdWByZSBvbiBwYWdlJztcbiAgLyoqXG4gICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyUGFnaW5hdGlvbkxhYmVsID0gJ1BhZ2luYXRpb24nO1xuICAvKipcbiAgKiBBZGRzIGN1c3RvbSBjbGFzcyB0byB0aGUgcGFnaW5hdGlvbiBlbGVtZW50XG4gICovXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogSGlkZXMgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50IGlmIHRoZSBpdGVtcyBhcmUgbGVzcyB0aGFuIGBpdGVtc1BlclBhZ2VgXG4gICAqL1xuICBASW5wdXQoKSBhdXRvSGlkZSA9IGZhbHNlO1xuICAvKipcbiAgICogZGlzYWJsZXMgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IHdoZW5ldmVyIHRoZSBjdXJyZW50IHBhZ2UgaXMgY2hhbmdlZCwgSXQgZW1pdHMgdGhlIGN1cnJlbnQgcGFnZSBudW1iZXJcbiAgICpcbiAgICogVGhpcyBldmVudCBpcyBvcmlnaW5hbGx5IHBpY2tlZCB1cCBmcm9tIGBBbmd1bGFyUGFnaW5hdG9yRGlyZWN0aXZlYFxuICAgKi9cbiAgQE91dHB1dCgpIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBfYW5ndWxhclBhZ2luYXRvclNlcnZpY2Ugc2VydmljZSBmb3IgYW5ndWxhciBwYWdpbmF0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2FuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlOiBBbmd1bGFyUGFnaW5hdG9yU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCBpZCBpZiBub3QgcHJvdmlkZWRcbiAgICB0aGlzLmlkID0gdGhpcy5pZCA/IHRoaXMuaWQgOiB0aGlzLl9hbmd1bGFyUGFnaW5hdG9yU2VydmljZS5pZDtcblxuICAgIC8vIHNldCBkZWZhdWx0IGNsYXNzIGlmIG5vdCBwcm92aWRlZFxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgPyB0aGlzLmNsYXNzTmFtZSA6IHRoaXMuX2FuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlLmlkO1xuICB9XG59XG4iXX0=