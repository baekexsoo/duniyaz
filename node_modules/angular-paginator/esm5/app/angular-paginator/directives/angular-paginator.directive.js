/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
import { Subject } from 'rxjs';
/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
var AngularPaginatorDirective = /** @class */ (function () {
    /**
     *
     * @param _angularPaginatorService serivce for angular paginator
     * @param _changeDetectorRef for manual change detection
     */
    function AngularPaginatorDirective(_angularPaginatorService, _changeDetectorRef) {
        var _this = this;
        this._angularPaginatorService = _angularPaginatorService;
        this._changeDetectorRef = _changeDetectorRef;
        this.firstPage = 1;
        this.pages = [];
        this.subscription = new Subject();
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this._angularPaginatorService.change.subscribe(function (id) {
            if (id === _this.id) {
                _this.updatePages();
                _this._changeDetectorRef.markForCheck();
            }
        });
    }
    /**
     * Navigate to prevoius page
     */
    /**
     * Navigate to prevoius page
     * @return {?}
     */
    AngularPaginatorDirective.prototype.toPreviousPage = /**
     * Navigate to prevoius page
     * @return {?}
     */
    function () {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    };
    /**
     * Navigate to next page
     */
    /**
     * Navigate to next page
     * @return {?}
     */
    AngularPaginatorDirective.prototype.toNextPage = /**
     * Navigate to next page
     * @return {?}
     */
    function () {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    };
    /**
     * Navigate to first page
     */
    /**
     * Navigate to first page
     * @return {?}
     */
    AngularPaginatorDirective.prototype.toFirstPage = /**
     * Navigate to first page
     * @return {?}
     */
    function () {
        this.setCurrentPage(this.firstPage);
        return;
    };
    /**
     * Navigate to last page
     */
    /**
     * Navigate to last page
     * @return {?}
     */
    AngularPaginatorDirective.prototype.toLastPage = /**
     * Navigate to last page
     * @return {?}
     */
    function () {
        this.setCurrentPage(this.lastPage);
        return;
    };
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    /**
     * Sets current page
     *
     * @param {?} page page number to set as currentPage
     * @return {?}
     */
    AngularPaginatorDirective.prototype.setCurrentPage = /**
     * Sets current page
     *
     * @param {?} page page number to set as currentPage
     * @return {?}
     */
    function (page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    };
    /**
     * create page object used for template
     *
     * @param number page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    /**
     * create page object used for template
     *
     * @param {?} number page number
     * @param {?} text page number, text to be displayed
     * @param {?} isActive whether the page is active or not, true for currentPage
     * @return {?}
     */
    AngularPaginatorDirective.prototype.makePage = /**
     * create page object used for template
     *
     * @param {?} number page number
     * @param {?} text page number, text to be displayed
     * @param {?} isActive whether the page is active or not, true for currentPage
     * @return {?}
     */
    function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    };
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    /**
     *  create page array
     *
     * @param {?} currentPage current page number
     * @param {?} itemsPerPage total items per page
     * @param {?} totalItems no of items for pagination, usually array length
     * @return {?}
     */
    AngularPaginatorDirective.prototype.getPages = /**
     *  create page array
     *
     * @param {?} currentPage current page number
     * @param {?} itemsPerPage total items per page
     * @param {?} totalItems no of items for pagination, usually array length
     * @return {?}
     */
    function (currentPage, itemsPerPage, totalItems) {
        /** @type {?} */
        var pages = [];
        /** @type {?} */
        var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        /** @type {?} */
        var startPage = 1;
        /** @type {?} */
        var endPage = totalPages;
        /** @type {?} */
        var isMaxSized = this.maxSize && this.maxSize < totalPages;
        // recompute if maxSize
        if (isMaxSized) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (var number = startPage; number <= endPage; number++) {
            /** @type {?} */
            var page = this.makePage(number, number, number === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning
                    /** @type {?} */
                    var previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        /** @type {?} */
                        var secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    /** @type {?} */
                    var firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end
                    /** @type {?} */
                    var nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                        /** @type {?} */
                        var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    /** @type {?} */
                    var lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    };
    /**
     * Updates the pagination component
     */
    /**
     * Updates the pagination component
     * @return {?}
     */
    AngularPaginatorDirective.prototype.updatePages = /**
     * Updates the pagination component
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = this._angularPaginatorService.getInstance(this.id);
        /** @type {?} */
        var correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    };
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param {?} instance instance for which the range is to be corrected
     * @return {?}
     */
    AngularPaginatorDirective.prototype.outOfBoundCorrection = /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param {?} instance instance for which the range is to be corrected
     * @return {?}
     */
    function (instance) {
        /** @type {?} */
        var totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);
        if (totalPages < instance['currentPage'] && 0 < totalPages) {
            return totalPages;
        }
        else if (instance['currentPage'] < 1) {
            return 1;
        }
        return instance['currentPage'];
    };
    /**
     * check if there is any instance registered with the id
     */
    /**
     * check if there is any instance registered with the id
     * @return {?}
     */
    AngularPaginatorDirective.prototype.isValidId = /**
     * check if there is any instance registered with the id
     * @return {?}
     */
    function () {
        if (!this._angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    };
    /**
     * @return {?}
     */
    AngularPaginatorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.isValidId();
        this.updatePages();
    };
    /**
     * @return {?}
     */
    AngularPaginatorDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    };
    AngularPaginatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'appAngularPaginator, [appAngularPaginator]',
                    exportAs: 'angularPaginator'
                },] }
    ];
    /** @nocollapse */
    AngularPaginatorDirective.ctorParameters = function () { return [
        { type: AngularPaginatorService },
        { type: ChangeDetectorRef }
    ]; };
    AngularPaginatorDirective.propDecorators = {
        boundaryLinks: [{ type: Input }],
        directionLinks: [{ type: Input }],
        maxSize: [{ type: Input }],
        rotate: [{ type: Input }],
        boundaryLinkNumbers: [{ type: Input }],
        forceEllipses: [{ type: Input }],
        id: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return AngularPaginatorDirective;
}());
export { AngularPaginatorDirective };
if (false) {
    /**
     * Whether to display First / Last buttons
     * @type {?}
     */
    AngularPaginatorDirective.prototype.boundaryLinks;
    /**
     * Whether to display Previous / Next buttons
     * @type {?}
     */
    AngularPaginatorDirective.prototype.directionLinks;
    /**
     * Limit number for pagination size, i.e., the maximum page numbers to be displayed
     * @type {?}
     */
    AngularPaginatorDirective.prototype.maxSize;
    /**
     * Whether to keep current page in the middle of the visible ones
     * @type {?}
     */
    AngularPaginatorDirective.prototype.rotate;
    /**
     * Whether to always display the first and last page numbers.
     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
     * in-between as necessary. NOTE: max-size refers to the center of the range.
     * This option may add up to 2 more numbers on each side of the displayed range for the end value and
     * what would be an ellipsis but is replaced by a number because it is sequential
     * @type {?}
     */
    AngularPaginatorDirective.prototype.boundaryLinkNumbers;
    /**
     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
     * @type {?}
     */
    AngularPaginatorDirective.prototype.forceEllipses;
    /**
     * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
     * @type {?}
     */
    AngularPaginatorDirective.prototype.id;
    /** @type {?} */
    AngularPaginatorDirective.prototype.currentPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.firstPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.lastPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.pages;
    /** @type {?} */
    AngularPaginatorDirective.prototype.subscription;
    /**
     * Emits an event whenever the current page is changed, It emits the current page number
     * @type {?}
     */
    AngularPaginatorDirective.prototype.pageChange;
    /** @type {?} */
    AngularPaginatorDirective.prototype._angularPaginatorService;
    /** @type {?} */
    AngularPaginatorDirective.prototype._changeDetectorRef;
}

//# sourceMappingURL=data:application/json;base64,