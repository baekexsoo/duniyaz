/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
var AngularPaginatorService = /** @class */ (function () {
    function AngularPaginatorService() {
        /**
         * id is used to identify pagination instances
         */
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        /**
         * instances is the collection of pagination componetns
         */
        this.instances = {};
        /**
         * emits an event with instance id whenever the page number changes
         */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param {?} instance each instance refers to a unique pagination component
     * @return {?}
     */
    AngularPaginatorService.prototype.registerInstance = /**
     * creates an instance for every pipe differentiated with id
     *
     * @param {?} instance each instance refers to a unique pagination component
     * @return {?}
     */
    function (instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            /** @type {?} */
            var changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    };
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param {?} instance an unique pagination component
     * @return {?}
     */
    AngularPaginatorService.prototype.updateInstance = /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param {?} instance an unique pagination component
     * @return {?}
     */
    function (instance) {
        for (var key in instance) {
            if (instance[key] !== this.instances[instance['id']][key]) {
                this.instances[instance['id']][key] = instance[key];
                return true;
            }
        }
        return false;
    };
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    /**
     * return instance with given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    AngularPaginatorService.prototype.getInstance = /**
     * return instance with given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    function (id) {
        return this.instances[id];
    };
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    /**
     * return currentPage for given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    AngularPaginatorService.prototype.getCurrentPage = /**
     * return currentPage for given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    function (id) {
        return this.instances[id].currentPage;
    };
    AngularPaginatorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AngularPaginatorService.ctorParameters = function () { return []; };
    return AngularPaginatorService;
}());
export { AngularPaginatorService };
if (false) {
    /**
     * id is used to identify pagination instances
     * @type {?}
     */
    AngularPaginatorService.prototype.id;
    /**
     * instances is the collection of pagination componetns
     * @type {?}
     */
    AngularPaginatorService.prototype.instances;
    /**
     * emits an event with instance id whenever the page number changes
     * @type {?}
     */
    AngularPaginatorService.prototype.change;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGFnaW5hdG9yLyIsInNvdXJjZXMiOlsiYXBwL2FuZ3VsYXItcGFnaW5hdG9yL3NlcnZpY2VzL2FuZ3VsYXItcGFnaW5hdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOztJQWN2RDs7OztrQkFSSywyQkFBMkI7Ozs7eUJBR2YsRUFBRTs7OztzQkFHWSxJQUFJLFlBQVksRUFBVTtLQUV4QztJQUVqQjs7OztPQUlHOzs7Ozs7O0lBQ0gsa0RBQWdCOzs7Ozs7SUFBaEIsVUFBaUIsUUFBa0M7UUFFakQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7YUFBTTs7WUFDTCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLElBQUksT0FBTyxFQUFFO2dCQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMvQjtTQUNGO1FBRUQsT0FBTztLQUNSO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0gsZ0RBQWM7Ozs7Ozs7SUFBZCxVQUFlLFFBQWtDO1FBRS9DLEtBQUssSUFBTSxHQUFHLElBQUksUUFBUSxFQUFFO1lBQzFCLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILDZDQUFXOzs7Ozs7SUFBWCxVQUFZLEVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzNCO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNILGdEQUFjOzs7Ozs7SUFBZCxVQUFlLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQztLQUN2Qzs7Z0JBbkVGLFVBQVU7Ozs7a0NBSFg7O1NBSWEsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UgfSBmcm9tICcuLi9vdGhlcnMvYW5ndWxhci1wYWdpbmF0b3IuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlIHtcbiAgLyoqIGlkIGlzIHVzZWQgdG8gaWRlbnRpZnkgcGFnaW5hdGlvbiBpbnN0YW5jZXMgKi9cbiAgaWQgPSAnQU5HVUxBUl9QQUdJTkFUT1JfREVGQVVMVCc7XG5cbiAgLyoqIGluc3RhbmNlcyBpcyB0aGUgY29sbGVjdGlvbiBvZiBwYWdpbmF0aW9uIGNvbXBvbmV0bnMgKi9cbiAgaW5zdGFuY2VzOiBhbnkgPSB7fTtcblxuICAvKiogZW1pdHMgYW4gZXZlbnQgd2l0aCBpbnN0YW5jZSBpZCB3aGVuZXZlciB0aGUgcGFnZSBudW1iZXIgY2hhbmdlcyAqL1xuICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogY3JlYXRlcyBhbiBpbnN0YW5jZSBmb3IgZXZlcnkgcGlwZSBkaWZmZXJlbnRpYXRlZCB3aXRoIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBlYWNoIGluc3RhbmNlIHJlZmVycyB0byBhIHVuaXF1ZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgcmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlKTogdm9pZCB7XG5cbiAgICBpZiAoIXRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXSkge1xuICAgICAgdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdID0gaW5zdGFuY2U7XG4gICAgICB0aGlzLmNoYW5nZS5lbWl0KGluc3RhbmNlLmlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hhbmdlZCA9IHRoaXMudXBkYXRlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChpbnN0YW5jZS5pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZXMgZXhpc3RpbmcgcGFnaW5hdGlvbiBpbnN0YW5jZXMgYXZhaWxhYmxlXG4gICAqIGFuZCByZXR1cm5zIHRydWUgaWYgdmFsdWUgaGFzIGNoYW5nZWRcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIGFuIHVuaXF1ZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgdXBkYXRlSW5zdGFuY2UoaW5zdGFuY2U6IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSk6IGJvb2xlYW4ge1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdGFuY2UpIHtcbiAgICAgIGlmIChpbnN0YW5jZVtrZXldICE9PSB0aGlzLmluc3RhbmNlc1tpbnN0YW5jZVsnaWQnXV1ba2V5XSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlc1tpbnN0YW5jZVsnaWQnXV1ba2V5XSA9IGluc3RhbmNlW2tleV07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gaW5zdGFuY2Ugd2l0aCBnaXZlbiBpZFxuICAgKlxuICAgKiBAcGFyYW0gaWQgdW5pcXVlIGlkIG9mIHRoZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gY3VycmVudFBhZ2UgZm9yIGdpdmVuIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCB1bmlxdWUgaWQgb2YgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICBnZXRDdXJyZW50UGFnZShpZDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNbaWRdLmN1cnJlbnRQYWdlO1xuICB9XG59XG4iXX0=