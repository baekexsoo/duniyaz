(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-paginator', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global['angular-paginator'] = {}),global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,core,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AngularPaginatorService = /** @class */ (function () {
        function AngularPaginatorService() {
            /**
             * id is used to identify pagination instances
             */
            this.id = 'ANGULAR_PAGINATOR_DEFAULT';
            /**
             * instances is the collection of pagination componetns
             */
            this.instances = {};
            /**
             * emits an event with instance id whenever the page number changes
             */
            this.change = new core.EventEmitter();
        }
        /**
         * creates an instance for every pipe differentiated with id
         *
         * @param instance each instance refers to a unique pagination component
         */
        /**
         * creates an instance for every pipe differentiated with id
         *
         * @param {?} instance each instance refers to a unique pagination component
         * @return {?}
         */
        AngularPaginatorService.prototype.registerInstance = /**
         * creates an instance for every pipe differentiated with id
         *
         * @param {?} instance each instance refers to a unique pagination component
         * @return {?}
         */
            function (instance) {
                if (!this.instances[instance.id]) {
                    this.instances[instance.id] = instance;
                    this.change.emit(instance.id);
                }
                else {
                    /** @type {?} */
                    var changed = this.updateInstance(instance);
                    if (changed) {
                        this.change.emit(instance.id);
                    }
                }
                return;
            };
        /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param instance an unique pagination component
         */
        /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param {?} instance an unique pagination component
         * @return {?}
         */
        AngularPaginatorService.prototype.updateInstance = /**
         * updates existing pagination instances available
         * and returns true if value has changed
         *
         * @param {?} instance an unique pagination component
         * @return {?}
         */
            function (instance) {
                for (var key in instance) {
                    if (instance[key] !== this.instances[instance['id']][key]) {
                        this.instances[instance['id']][key] = instance[key];
                        return true;
                    }
                }
                return false;
            };
        /**
         * return instance with given id
         *
         * @param id unique id of the pagination component
         */
        /**
         * return instance with given id
         *
         * @param {?} id unique id of the pagination component
         * @return {?}
         */
        AngularPaginatorService.prototype.getInstance = /**
         * return instance with given id
         *
         * @param {?} id unique id of the pagination component
         * @return {?}
         */
            function (id) {
                return this.instances[id];
            };
        /**
         * return currentPage for given id
         *
         * @param id unique id of the pagination component
         */
        /**
         * return currentPage for given id
         *
         * @param {?} id unique id of the pagination component
         * @return {?}
         */
        AngularPaginatorService.prototype.getCurrentPage = /**
         * return currentPage for given id
         *
         * @param {?} id unique id of the pagination component
         * @return {?}
         */
            function (id) {
                return this.instances[id].currentPage;
            };
        AngularPaginatorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AngularPaginatorService.ctorParameters = function () { return []; };
        return AngularPaginatorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
     */
    var AngularPaginatorComponent = /** @class */ (function () {
        /**
         *
         * @param _angularPaginatorService service for angular paginator
         */
        function AngularPaginatorComponent(_angularPaginatorService) {
            this._angularPaginatorService = _angularPaginatorService;
            /**
             * Whether to display First / Last buttons
             */
            this.boundaryLinks = false;
            /**
             * Whether to display Previous / Next buttons
             */
            this.directionLinks = true;
            /**
             * Limit number for pagination size, i.e., the maximum page numbers to be displayed
             */
            this.maxSize = 5;
            /**
             * Whether to keep current page in the middle of the visible ones
             */
            this.rotate = true;
            /**
             * Whether to always display the first and last page numbers.
             * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
             * in-between as necessary. NOTE: max-size refers to the center of the range.
             * This option may add up to 2 more numbers on each side of the displayed range for the end value and
             * what would be an ellipsis but is replaced by a number because it is sequential
             */
            this.boundaryLinkNumbers = false;
            /**
             * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
             */
            this.forceEllipses = false;
            /**
             * Text for first button
             */
            this.firstText = 'First';
            /**
             * Text for previous button
             */
            this.previousText = 'Previous';
            /**
             * Text for next button
             */
            this.nextText = 'Next';
            /**
             * Text for last button
             */
            this.lastText = 'Last';
            /**
             * Screen reader text for first button
             */
            this.screenReaderFirstText = 'First';
            /**
             * Screen reader text for previous button
             */
            this.screenReaderPreviousText = 'Previous';
            /**
             * Screen reader text for next button
             */
            this.screenReaderNextText = 'Next';
            /**
             * Screen reader text for lasr button
             */
            this.screenReaderLastText = 'Last';
            /**
             * Screen reader text for page numbers
             */
            this.screenReaderPageText = 'Page';
            /**
             * Screen reader text for current page
             */
            this.screenReaderCurrentPageText = 'You`re on page';
            /**
             * Screen reader text for the pagination component
             */
            this.screenReaderPaginationLabel = 'Pagination';
            /**
             * Hides the pagination component if the items are less than `itemsPerPage`
             */
            this.autoHide = false;
            /**
             * disables pagination component
             */
            this.disabled = false;
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             *
             * This event is originally picked up from `AngularPaginatorDirective`
             */
            this.pageChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        AngularPaginatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // set default id if not provided
                this.id = this.id ? this.id : this._angularPaginatorService.id;
                // set default class if not provided
                this.className = this.className ? this.className : this._angularPaginatorService.id;
            };
        AngularPaginatorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-angular-paginator',
                        template: "<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</appAngularPaginator>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
                    }] }
        ];
        /** @nocollapse */
        AngularPaginatorComponent.ctorParameters = function () {
            return [
                { type: AngularPaginatorService }
            ];
        };
        AngularPaginatorComponent.propDecorators = {
            boundaryLinks: [{ type: core.Input }],
            directionLinks: [{ type: core.Input }],
            maxSize: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            boundaryLinkNumbers: [{ type: core.Input }],
            forceEllipses: [{ type: core.Input }],
            id: [{ type: core.Input }],
            firstText: [{ type: core.Input }],
            previousText: [{ type: core.Input }],
            nextText: [{ type: core.Input }],
            lastText: [{ type: core.Input }],
            screenReaderFirstText: [{ type: core.Input }],
            screenReaderPreviousText: [{ type: core.Input }],
            screenReaderNextText: [{ type: core.Input }],
            screenReaderLastText: [{ type: core.Input }],
            screenReaderPageText: [{ type: core.Input }],
            screenReaderCurrentPageText: [{ type: core.Input }],
            screenReaderPaginationLabel: [{ type: core.Input }],
            className: [{ type: core.Input }],
            autoHide: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            pageChange: [{ type: core.Output }]
        };
        return AngularPaginatorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     */
    var AngularPaginatorPipe = /** @class */ (function () {
        /**
         *
         * @param _angularPaginatorService service for angular pagiantor
         */
        function AngularPaginatorPipe(_angularPaginatorService) {
            this._angularPaginatorService = _angularPaginatorService;
        }
        /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param {?} array input array for which the manipulation happens
         * @param {?=} args input arguments for the paginator pipe
         * @return {?}
         */
        AngularPaginatorPipe.prototype.transform = /**
         * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
         *
         * @param {?} array input array for which the manipulation happens
         * @param {?=} args input arguments for the paginator pipe
         * @return {?}
         */
            function (array, args) {
                /** @type {?} */
                var instance = this.createInstance(array, args);
                // create pagination information
                this._angularPaginatorService.registerInstance(instance);
                /** @type {?} */
                var start = (instance.currentPage - 1) * instance.itemsPerPage;
                /** @type {?} */
                var end = instance.currentPage * instance.itemsPerPage;
                return array.slice(start, end);
            };
        /**
         * create an instance for each pipe
         *
         * @param array input array for which the manipulation happens
         * @param args input arguments for the paginator pipe
         */
        /**
         * create an instance for each pipe
         *
         * @param {?} array input array for which the manipulation happens
         * @param {?} args input arguments for the paginator pipe
         * @return {?}
         */
        AngularPaginatorPipe.prototype.createInstance = /**
         * create an instance for each pipe
         *
         * @param {?} array input array for which the manipulation happens
         * @param {?} args input arguments for the paginator pipe
         * @return {?}
         */
            function (array, args) {
                return {
                    id: args['id'] ? args.id : this._angularPaginatorService.id,
                    currentPage: args['currentPage'] ? args['currentPage'] : 1,
                    itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,
                    totalItems: array['length']
                };
            };
        AngularPaginatorPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'angularPaginator'
                    },] }
        ];
        /** @nocollapse */
        AngularPaginatorPipe.ctorParameters = function () {
            return [
                { type: AngularPaginatorService }
            ];
        };
        return AngularPaginatorPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * This is the directive where the actual pagination takes place, it provides a sync between the
     * pipes and the pagination component
     */
    var AngularPaginatorDirective = /** @class */ (function () {
        /**
         *
         * @param _angularPaginatorService serivce for angular paginator
         * @param _changeDetectorRef for manual change detection
         */
        function AngularPaginatorDirective(_angularPaginatorService, _changeDetectorRef) {
            var _this = this;
            this._angularPaginatorService = _angularPaginatorService;
            this._changeDetectorRef = _changeDetectorRef;
            this.firstPage = 1;
            this.pages = [];
            this.subscription = new rxjs.Subject();
            /**
             * Emits an event whenever the current page is changed, It emits the current page number
             */
            this.pageChange = new core.EventEmitter(true);
            // subscribe to changes
            this.subscription = this._angularPaginatorService.change.subscribe(function (id) {
                if (id === _this.id) {
                    _this.updatePages();
                    _this._changeDetectorRef.markForCheck();
                }
            });
        }
        /**
         * Navigate to prevoius page
         */
        /**
         * Navigate to prevoius page
         * @return {?}
         */
        AngularPaginatorDirective.prototype.toPreviousPage = /**
         * Navigate to prevoius page
         * @return {?}
         */
            function () {
                if (this.currentPage > this.firstPage) {
                    this.setCurrentPage(this.currentPage - 1);
                }
                return;
            };
        /**
         * Navigate to next page
         */
        /**
         * Navigate to next page
         * @return {?}
         */
        AngularPaginatorDirective.prototype.toNextPage = /**
         * Navigate to next page
         * @return {?}
         */
            function () {
                if (this.currentPage < this.lastPage) {
                    this.setCurrentPage(this.currentPage + 1);
                }
                return;
            };
        /**
         * Navigate to first page
         */
        /**
         * Navigate to first page
         * @return {?}
         */
        AngularPaginatorDirective.prototype.toFirstPage = /**
         * Navigate to first page
         * @return {?}
         */
            function () {
                this.setCurrentPage(this.firstPage);
                return;
            };
        /**
         * Navigate to last page
         */
        /**
         * Navigate to last page
         * @return {?}
         */
        AngularPaginatorDirective.prototype.toLastPage = /**
         * Navigate to last page
         * @return {?}
         */
            function () {
                this.setCurrentPage(this.lastPage);
                return;
            };
        /**
         * Sets current page
         *
         * @param page page number to set as currentPage
         */
        /**
         * Sets current page
         *
         * @param {?} page page number to set as currentPage
         * @return {?}
         */
        AngularPaginatorDirective.prototype.setCurrentPage = /**
         * Sets current page
         *
         * @param {?} page page number to set as currentPage
         * @return {?}
         */
            function (page) {
                if (page && this.currentPage !== page) {
                    this.currentPage = page;
                    this.pageChange.emit(page);
                }
                return;
            };
        /**
         * create page object used for template
         *
         * @param number page number
         * @param text page number, text to be displayed
         * @param isActive whether the page is active or not, true for currentPage
         */
        /**
         * create page object used for template
         *
         * @param {?} number page number
         * @param {?} text page number, text to be displayed
         * @param {?} isActive whether the page is active or not, true for currentPage
         * @return {?}
         */
        AngularPaginatorDirective.prototype.makePage = /**
         * create page object used for template
         *
         * @param {?} number page number
         * @param {?} text page number, text to be displayed
         * @param {?} isActive whether the page is active or not, true for currentPage
         * @return {?}
         */
            function (number, text, isActive) {
                return {
                    number: number,
                    text: text,
                    active: isActive
                };
            };
        /**
         *  create page array
         *
         * @param currentPage current page number
         * @param itemsPerPage total items per page
         * @param totalItems no of items for pagination, usually array length
         */
        /**
         *  create page array
         *
         * @param {?} currentPage current page number
         * @param {?} itemsPerPage total items per page
         * @param {?} totalItems no of items for pagination, usually array length
         * @return {?}
         */
        AngularPaginatorDirective.prototype.getPages = /**
         *  create page array
         *
         * @param {?} currentPage current page number
         * @param {?} itemsPerPage total items per page
         * @param {?} totalItems no of items for pagination, usually array length
         * @return {?}
         */
            function (currentPage, itemsPerPage, totalItems) {
                /** @type {?} */
                var pages = [];
                /** @type {?} */
                var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
                /** @type {?} */
                var startPage = 1;
                /** @type {?} */
                var endPage = totalPages;
                /** @type {?} */
                var isMaxSized = this.maxSize && this.maxSize < totalPages;
                // recompute if maxSize
                if (isMaxSized) {
                    if (this.rotate) {
                        // current page is displayed in the middle of the visible ones
                        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                        endPage = startPage + this.maxSize - 1;
                        // Adjust if limit is exceeded
                        if (endPage > totalPages) {
                            endPage = totalPages;
                            startPage = endPage - this.maxSize + 1;
                        }
                    }
                    else {
                        // Visible pages are paginated with maxSize
                        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                        // adjust last page if limit is exceeded
                        endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                    }
                }
                // add page number links
                for (var number = startPage; number <= endPage; number++) {
                    /** @type {?} */
                    var page = this.makePage(number, number, number === currentPage);
                    pages.push(page);
                }
                // add links to move between page sets
                if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
                    if (startPage > 1) {
                        if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning
                            /** @type {?} */
                            var previousPageSet = this.makePage(startPage - 1, '...', false);
                            pages.unshift(previousPageSet);
                        }
                        if (this.boundaryLinkNumbers) {
                            if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                                /** @type {?} */
                                var secondPageLink = this.makePage(2, '2', false);
                                pages.unshift(secondPageLink);
                            }
                            /** @type {?} */
                            var firstPageLink = this.makePage(1, '1', false);
                            pages.unshift(firstPageLink);
                        }
                    }
                    if (endPage < totalPages) {
                        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end
                            /** @type {?} */
                            var nextPageSet = this.makePage(endPage + 1, '...', false);
                            pages.push(nextPageSet);
                        }
                        if (this.boundaryLinkNumbers) {
                            if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                                /** @type {?} */
                                var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                                pages.push(secondToLastPageLink);
                            }
                            /** @type {?} */
                            var lastPageLink = this.makePage(totalPages, totalPages, false);
                            pages.push(lastPageLink);
                        }
                    }
                }
                return pages;
            };
        /**
         * Updates the pagination component
         */
        /**
         * Updates the pagination component
         * @return {?}
         */
        AngularPaginatorDirective.prototype.updatePages = /**
         * Updates the pagination component
         * @return {?}
         */
            function () {
                /** @type {?} */
                var instance = this._angularPaginatorService.getInstance(this.id);
                /** @type {?} */
                var correctedCurrentPage = this.outOfBoundCorrection(instance);
                if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {
                    this.setCurrentPage(correctedCurrentPage);
                }
                this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
                return;
            };
        /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param instance instance for which the range is to be corrected
         */
        /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param {?} instance instance for which the range is to be corrected
         * @return {?}
         */
        AngularPaginatorDirective.prototype.outOfBoundCorrection = /**
         * Check if currentPage is out of bound with totalPages
         *
         * @param {?} instance instance for which the range is to be corrected
         * @return {?}
         */
            function (instance) {
                /** @type {?} */
                var totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);
                if (totalPages < instance['currentPage'] && 0 < totalPages) {
                    return totalPages;
                }
                else if (instance['currentPage'] < 1) {
                    return 1;
                }
                return instance['currentPage'];
            };
        /**
         * check if there is any instance registered with the id
         */
        /**
         * check if there is any instance registered with the id
         * @return {?}
         */
        AngularPaginatorDirective.prototype.isValidId = /**
         * check if there is any instance registered with the id
         * @return {?}
         */
            function () {
                if (!this._angularPaginatorService.getInstance(this.id)) {
                    throw new Error('There is no instance registered with id `' + this.id + '`');
                }
                return;
            };
        /**
         * @return {?}
         */
        AngularPaginatorDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.isValidId();
                this.updatePages();
            };
        /**
         * @return {?}
         */
        AngularPaginatorDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                /** destroy the subscription when the directive is destroyed */
                this.subscription.unsubscribe();
            };
        AngularPaginatorDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'appAngularPaginator, [appAngularPaginator]',
                        exportAs: 'angularPaginator'
                    },] }
        ];
        /** @nocollapse */
        AngularPaginatorDirective.ctorParameters = function () {
            return [
                { type: AngularPaginatorService },
                { type: core.ChangeDetectorRef }
            ];
        };
        AngularPaginatorDirective.propDecorators = {
            boundaryLinks: [{ type: core.Input }],
            directionLinks: [{ type: core.Input }],
            maxSize: [{ type: core.Input }],
            rotate: [{ type: core.Input }],
            boundaryLinkNumbers: [{ type: core.Input }],
            forceEllipses: [{ type: core.Input }],
            id: [{ type: core.Input }],
            pageChange: [{ type: core.Output }]
        };
        return AngularPaginatorDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AngularPaginatorModule = /** @class */ (function () {
        function AngularPaginatorModule() {
        }
        AngularPaginatorModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        providers: [AngularPaginatorService],
                        declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
                        exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]
                    },] }
        ];
        return AngularPaginatorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AngularPaginatorModule = AngularPaginatorModule;
    exports.ɵb = AngularPaginatorComponent;
    exports.ɵd = AngularPaginatorDirective;
    exports.ɵc = AngularPaginatorPipe;
    exports.ɵa = AngularPaginatorService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,