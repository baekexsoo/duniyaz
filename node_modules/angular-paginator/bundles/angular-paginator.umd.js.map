{"version":3,"file":"angular-paginator.umd.js.map","sources":["ng://angular-paginator/app/angular-paginator/services/angular-paginator.service.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.component.ts","ng://angular-paginator/app/angular-paginator/pipes/angular-paginator.pipe.ts","ng://angular-paginator/app/angular-paginator/directives/angular-paginator.directive.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.module.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: any = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n\n    for (const key in instance) {\n      if (instance[key] !== this.instances[instance['id']][key]) {\n        this.instances[instance['id']][key] = instance[key];\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): any {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n/**\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\n */\n@Component({\n  selector: 'app-angular-paginator',\n  templateUrl: './angular-paginator.component.html',\n  styleUrls: ['./angular-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AngularPaginatorComponent implements OnInit {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks = false;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks = true;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize = 5;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = true;\n  /**\n    * Whether to always display the first and last page numbers.\n    * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n    * in-between as necessary. NOTE: max-size refers to the center of the range.\n    * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n    * what would be an ellipsis but is replaced by a number because it is sequential\n    */\n  @Input() boundaryLinkNumbers = false;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n  /**\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n  /**\n   * Text for first button\n   */\n  @Input() firstText = 'First';\n  /**\n   * Text for previous button\n   */\n  @Input() previousText = 'Previous';\n  /**\n   * Text for next button\n   */\n  @Input() nextText = 'Next';\n  /**\n   * Text for last button\n   */\n  @Input() lastText = 'Last';\n  /**\n   * Screen reader text for first button\n   */\n  @Input() screenReaderFirstText = 'First';\n  /**\n  * Screen reader text for previous button\n  */\n  @Input() screenReaderPreviousText = 'Previous';\n  /**\n  * Screen reader text for next button\n  */\n  @Input() screenReaderNextText = 'Next';\n  /**\n  * Screen reader text for lasr button\n  */\n  @Input() screenReaderLastText = 'Last';\n  /**\n  * Screen reader text for page numbers\n  */\n  @Input() screenReaderPageText = 'Page';\n  /**\n  * Screen reader text for current page\n  */\n  @Input() screenReaderCurrentPageText = 'You`re on page';\n  /**\n  * Screen reader text for the pagination component\n  */\n  @Input() screenReaderPaginationLabel = 'Pagination';\n  /**\n  * Adds custom class to the pagination element\n  */\n  @Input() className: string;\n  /**\n   * Hides the pagination component if the items are less than `itemsPerPage`\n   */\n  @Input() autoHide = false;\n  /**\n   * disables pagination component\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   *\n   * This event is originally picked up from `AngularPaginatorDirective`\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   *\n   * @param _angularPaginatorService service for angular paginator\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\n\n  ngOnInit() {\n\n    // set default id if not provided\n    this.id = this.id ? this.id : this._angularPaginatorService.id;\n\n    // set default class if not provided\n    this.className = this.className ? this.className : this._angularPaginatorService.id;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator'\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param _angularPaginatorService service for angular pagiantor\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform(array: any, args?: any): any {\n\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this._angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: any, args: any): any {\n    return {\n      id: args['id'] ? args.id : this._angularPaginatorService.id,\n      currentPage: args['currentPage'] ? args['currentPage'] : 1,\n      itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,\n      totalItems: array['length']\n    };\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subject } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'appAngularPaginator, [appAngularPaginator]',\n  exportAs: 'angularPaginator'\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks: boolean;\n  /**\n  * Whether to display Previous / Next buttons\n  */\n  @Input() directionLinks: boolean;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize: number;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate: boolean;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers: boolean;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses: boolean;\n  /**\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n\n  currentPage: number;\n  firstPage = 1;\n  lastPage: number;\n  pages: Page[] = [];\n\n  private subscription: Subject<any> = new Subject();\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param _angularPaginatorService serivce for angular paginator\n   * @param _changeDetectorRef for manual change detection\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // subscribe to changes\n    this.subscription = this._angularPaginatorService.change.subscribe(id => {\n      if (id === this.id) {\n        this.updatePages();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setCurrentPage(this.currentPage - 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setCurrentPage(this.currentPage + 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setCurrentPage(this.firstPage);\n    return;\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setCurrentPage(this.lastPage);\n    return;\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n    return;\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param number page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  makePage(number: number, text: any, isActive: boolean): any {\n    return {\n      number: number,\n      text: text,\n      active: isActive\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\n    const pages: any = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n\n      if (this.rotate) {\n\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let number = startPage; number <= endPage; number++) {\n      const page = this.makePage(number, number, number === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n\n        if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  updatePages(): void {\n    const instance: AngularPaginatorInstance = this._angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {\n      this.setCurrentPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n\n    return;\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n\n    const totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);\n\n    if (totalPages < instance['currentPage'] && 0 < totalPages) {\n      return totalPages;\n    } else if (instance['currentPage'] < 1) {\n      return 1;\n    }\n\n    return instance['currentPage'];\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n\n    if (!this._angularPaginatorService.getInstance(this.id)) {\n      throw new Error('There is no instance registered with id `' + this.id + '`');\n    }\n\n    return;\n  }\n\n  ngOnInit() {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy() {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularPaginatorComponent } from './angular-paginator.component';\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]\n})\n\nexport class AngularPaginatorModule { }\n"],"names":["EventEmitter","Injectable","Component","ChangeDetectionStrategy","Input","Output","Pipe","Subject","Directive","ChangeDetectorRef","NgModule","CommonModule"],"mappings":"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"}
