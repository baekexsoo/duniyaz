{"version":3,"sources":["ng://angular-paginator/app/angular-paginator/services/angular-paginator.service.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.component.ts","ng://angular-paginator/app/angular-paginator/pipes/angular-paginator.pipe.ts","ng://angular-paginator/app/angular-paginator/directives/angular-paginator.directive.ts","ng://angular-paginator/app/angular-paginator/angular-paginator.module.ts"],"names":["AngularPaginatorService","EventEmitter","prototype","registerInstance","instance","this","instances","id","updateInstance","change","emit","key","getInstance","getCurrentPage","currentPage","Injectable","AngularPaginatorComponent","_angularPaginatorService","ngOnInit","className","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","AngularPaginatorPipe","transform","array","createInstance","start","itemsPerPage","end","slice","totalItems","Pipe","name","AngularPaginatorDirective","_changeDetectorRef","_this","Subject","subscription","subscribe","updatePages","markForCheck","toPreviousPage","firstPage","setCurrentPage","toNextPage","lastPage","toFirstPage","toLastPage","page","pageChange","makePage","number","text","isActive","active","getPages","pages","totalPages","Math","ceil","startPage","endPage","isMaxSized","maxSize","rotate","max","floor","min","push","forceEllipses","boundaryLinkNumbers","previousPageSet","unshift","secondPageLink","firstPageLink","nextPageSet","secondToLastPageLink","lastPageLink","correctedCurrentPage","outOfBoundCorrection","isValidId","Error","ngOnDestroy","unsubscribe","Directive","exportAs","ChangeDetectorRef","AngularPaginatorModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: any = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n\n    for (const key in instance) {\n      if (instance[key] !== this.instances[instance['id']][key]) {\n        this.instances[instance['id']][key] = instance[key];\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): any {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n/**\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\n */\n@Component({\n  selector: 'app-angular-paginator',\n  templateUrl: './angular-paginator.component.html',\n  styleUrls: ['./angular-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AngularPaginatorComponent implements OnInit {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks = false;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks = true;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize = 5;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = true;\n  /**\n    * Whether to always display the first and last page numbers.\n    * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n    * in-between as necessary. NOTE: max-size refers to the center of the range.\n    * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n    * what would be an ellipsis but is replaced by a number because it is sequential\n    */\n  @Input() boundaryLinkNumbers = false;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n  /**\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n  /**\n   * Text for first button\n   */\n  @Input() firstText = 'First';\n  /**\n   * Text for previous button\n   */\n  @Input() previousText = 'Previous';\n  /**\n   * Text for next button\n   */\n  @Input() nextText = 'Next';\n  /**\n   * Text for last button\n   */\n  @Input() lastText = 'Last';\n  /**\n   * Screen reader text for first button\n   */\n  @Input() screenReaderFirstText = 'First';\n  /**\n  * Screen reader text for previous button\n  */\n  @Input() screenReaderPreviousText = 'Previous';\n  /**\n  * Screen reader text for next button\n  */\n  @Input() screenReaderNextText = 'Next';\n  /**\n  * Screen reader text for lasr button\n  */\n  @Input() screenReaderLastText = 'Last';\n  /**\n  * Screen reader text for page numbers\n  */\n  @Input() screenReaderPageText = 'Page';\n  /**\n  * Screen reader text for current page\n  */\n  @Input() screenReaderCurrentPageText = 'You`re on page';\n  /**\n  * Screen reader text for the pagination component\n  */\n  @Input() screenReaderPaginationLabel = 'Pagination';\n  /**\n  * Adds custom class to the pagination element\n  */\n  @Input() className: string;\n  /**\n   * Hides the pagination component if the items are less than `itemsPerPage`\n   */\n  @Input() autoHide = false;\n  /**\n   * disables pagination component\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   *\n   * This event is originally picked up from `AngularPaginatorDirective`\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   *\n   * @param _angularPaginatorService service for angular paginator\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\n\n  ngOnInit() {\n\n    // set default id if not provided\n    this.id = this.id ? this.id : this._angularPaginatorService.id;\n\n    // set default class if not provided\n    this.className = this.className ? this.className : this._angularPaginatorService.id;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator'\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param _angularPaginatorService service for angular pagiantor\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform(array: any, args?: any): any {\n\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this._angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: any, args: any): any {\n    return {\n      id: args['id'] ? args.id : this._angularPaginatorService.id,\n      currentPage: args['currentPage'] ? args['currentPage'] : 1,\n      itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,\n      totalItems: array['length']\n    };\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subject } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'appAngularPaginator, [appAngularPaginator]',\n  exportAs: 'angularPaginator'\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks: boolean;\n  /**\n  * Whether to display Previous / Next buttons\n  */\n  @Input() directionLinks: boolean;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize: number;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate: boolean;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers: boolean;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses: boolean;\n  /**\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n\n  currentPage: number;\n  firstPage = 1;\n  lastPage: number;\n  pages: Page[] = [];\n\n  private subscription: Subject<any> = new Subject();\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param _angularPaginatorService serivce for angular paginator\n   * @param _changeDetectorRef for manual change detection\n   */\n  constructor(private _angularPaginatorService: AngularPaginatorService,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // subscribe to changes\n    this.subscription = this._angularPaginatorService.change.subscribe(id => {\n      if (id === this.id) {\n        this.updatePages();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setCurrentPage(this.currentPage - 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setCurrentPage(this.currentPage + 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setCurrentPage(this.firstPage);\n    return;\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setCurrentPage(this.lastPage);\n    return;\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n    return;\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param number page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  makePage(number: number, text: any, isActive: boolean): any {\n    return {\n      number: number,\n      text: text,\n      active: isActive\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\n    const pages: any = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n\n      if (this.rotate) {\n\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let number = startPage; number <= endPage; number++) {\n      const page = this.makePage(number, number, number === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n\n        if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  updatePages(): void {\n    const instance: AngularPaginatorInstance = this._angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {\n      this.setCurrentPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n\n    return;\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n\n    const totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);\n\n    if (totalPages < instance['currentPage'] && 0 < totalPages) {\n      return totalPages;\n    } else if (instance['currentPage'] < 1) {\n      return 1;\n    }\n\n    return instance['currentPage'];\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n\n    if (!this._angularPaginatorService.getInstance(this.id)) {\n      throw new Error('There is no instance registered with id `' + this.id + '`');\n    }\n\n    return;\n  }\n\n  ngOnInit() {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy() {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularPaginatorComponent } from './angular-paginator.component';\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]\n})\n\nexport class AngularPaginatorModule { }\n"]}