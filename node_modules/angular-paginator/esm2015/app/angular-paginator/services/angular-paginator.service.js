/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
export class AngularPaginatorService {
    constructor() {
        /**
         * id is used to identify pagination instances
         */
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        /**
         * instances is the collection of pagination componetns
         */
        this.instances = {};
        /**
         * emits an event with instance id whenever the page number changes
         */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param {?} instance each instance refers to a unique pagination component
     * @return {?}
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            /** @type {?} */
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param {?} instance an unique pagination component
     * @return {?}
     */
    updateInstance(instance) {
        for (const key in instance) {
            if (instance[key] !== this.instances[instance['id']][key]) {
                this.instances[instance['id']][key] = instance[key];
                return true;
            }
        }
        return false;
    }
    /**
     * return instance with given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param {?} id unique id of the pagination component
     * @return {?}
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
AngularPaginatorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AngularPaginatorService.ctorParameters = () => [];
if (false) {
    /**
     * id is used to identify pagination instances
     * @type {?}
     */
    AngularPaginatorService.prototype.id;
    /**
     * instances is the collection of pagination componetns
     * @type {?}
     */
    AngularPaginatorService.prototype.instances;
    /**
     * emits an event with instance id whenever the page number changes
     * @type {?}
     */
    AngularPaginatorService.prototype.change;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGFnaW5hdG9yLyIsInNvdXJjZXMiOlsiYXBwL2FuZ3VsYXItcGFnaW5hdG9yL3NlcnZpY2VzL2FuZ3VsYXItcGFnaW5hdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXpELE1BQU07SUFVSjs7OztrQkFSSywyQkFBMkI7Ozs7eUJBR2YsRUFBRTs7OztzQkFHWSxJQUFJLFlBQVksRUFBVTtLQUV4Qzs7Ozs7OztJQU9qQixnQkFBZ0IsQ0FBQyxRQUFrQztRQUVqRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMvQjthQUFNOztZQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQy9CO1NBQ0Y7UUFFRCxPQUFPO0tBQ1I7Ozs7Ozs7O0lBUUQsY0FBYyxDQUFDLFFBQWtDO1FBRS9DLEtBQUssTUFBTSxHQUFHLElBQUksUUFBUSxFQUFFO1lBQzFCLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztLQUNkOzs7Ozs7O0lBT0QsV0FBVyxDQUFDLEVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzNCOzs7Ozs7O0lBT0QsY0FBYyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQztLQUN2Qzs7O1lBbkVGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSB9IGZyb20gJy4uL290aGVycy9hbmd1bGFyLXBhZ2luYXRvci5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5ndWxhclBhZ2luYXRvclNlcnZpY2Uge1xuICAvKiogaWQgaXMgdXNlZCB0byBpZGVudGlmeSBwYWdpbmF0aW9uIGluc3RhbmNlcyAqL1xuICBpZCA9ICdBTkdVTEFSX1BBR0lOQVRPUl9ERUZBVUxUJztcblxuICAvKiogaW5zdGFuY2VzIGlzIHRoZSBjb2xsZWN0aW9uIG9mIHBhZ2luYXRpb24gY29tcG9uZXRucyAqL1xuICBpbnN0YW5jZXM6IGFueSA9IHt9O1xuXG4gIC8qKiBlbWl0cyBhbiBldmVudCB3aXRoIGluc3RhbmNlIGlkIHdoZW5ldmVyIHRoZSBwYWdlIG51bWJlciBjaGFuZ2VzICovXG4gIGNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGVzIGFuIGluc3RhbmNlIGZvciBldmVyeSBwaXBlIGRpZmZlcmVudGlhdGVkIHdpdGggaWRcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIGVhY2ggaW5zdGFuY2UgcmVmZXJzIHRvIGEgdW5pcXVlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICByZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlOiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UpOiB2b2lkIHtcblxuICAgIGlmICghdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdKSB7XG4gICAgICB0aGlzLmluc3RhbmNlc1tpbnN0YW5jZS5pZF0gPSBpbnN0YW5jZTtcbiAgICAgIHRoaXMuY2hhbmdlLmVtaXQoaW5zdGFuY2UuaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy51cGRhdGVJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KGluc3RhbmNlLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlcyBleGlzdGluZyBwYWdpbmF0aW9uIGluc3RhbmNlcyBhdmFpbGFibGVcbiAgICogYW5kIHJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBoYXMgY2hhbmdlZFxuICAgKlxuICAgKiBAcGFyYW0gaW5zdGFuY2UgYW4gdW5pcXVlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICB1cGRhdGVJbnN0YW5jZShpbnN0YW5jZTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlKTogYm9vbGVhbiB7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZSkge1xuICAgICAgaWYgKGluc3RhbmNlW2tleV0gIT09IHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlWydpZCddXVtrZXldKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlWydpZCddXVtrZXldID0gaW5zdGFuY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBpbnN0YW5jZSB3aXRoIGdpdmVuIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCB1bmlxdWUgaWQgb2YgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICBnZXRJbnN0YW5jZShpZDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNbaWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBjdXJyZW50UGFnZSBmb3IgZ2l2ZW4gaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIHVuaXF1ZSBpZCBvZiB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIGdldEN1cnJlbnRQYWdlKGlkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlc1tpZF0uY3VycmVudFBhZ2U7XG4gIH1cbn1cbiJdfQ==