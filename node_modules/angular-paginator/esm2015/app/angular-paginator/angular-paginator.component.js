/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { AngularPaginatorService } from './services/angular-paginator.service';
/**
 * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
 */
export class AngularPaginatorComponent {
    /**
     *
     * @param {?} _angularPaginatorService service for angular paginator
     */
    constructor(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
        /**
         * Whether to display First / Last buttons
         */
        this.boundaryLinks = false;
        /**
         * Whether to display Previous / Next buttons
         */
        this.directionLinks = true;
        /**
         * Limit number for pagination size, i.e., the maximum page numbers to be displayed
         */
        this.maxSize = 5;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = true;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        /**
         * Text for first button
         */
        this.firstText = 'First';
        /**
         * Text for previous button
         */
        this.previousText = 'Previous';
        /**
         * Text for next button
         */
        this.nextText = 'Next';
        /**
         * Text for last button
         */
        this.lastText = 'Last';
        /**
         * Screen reader text for first button
         */
        this.screenReaderFirstText = 'First';
        /**
         * Screen reader text for previous button
         */
        this.screenReaderPreviousText = 'Previous';
        /**
         * Screen reader text for next button
         */
        this.screenReaderNextText = 'Next';
        /**
         * Screen reader text for lasr button
         */
        this.screenReaderLastText = 'Last';
        /**
         * Screen reader text for page numbers
         */
        this.screenReaderPageText = 'Page';
        /**
         * Screen reader text for current page
         */
        this.screenReaderCurrentPageText = 'You`re on page';
        /**
         * Screen reader text for the pagination component
         */
        this.screenReaderPaginationLabel = 'Pagination';
        /**
         * Hides the pagination component if the items are less than `itemsPerPage`
         */
        this.autoHide = false;
        /**
         * disables pagination component
         */
        this.disabled = false;
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         *
         * This event is originally picked up from `AngularPaginatorDirective`
         */
        this.pageChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // set default id if not provided
        this.id = this.id ? this.id : this._angularPaginatorService.id;
        // set default class if not provided
        this.className = this.className ? this.className : this._angularPaginatorService.id;
    }
}
AngularPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-angular-paginator',
                template: "<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</appAngularPaginator>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
            }] }
];
/** @nocollapse */
AngularPaginatorComponent.ctorParameters = () => [
    { type: AngularPaginatorService }
];
AngularPaginatorComponent.propDecorators = {
    boundaryLinks: [{ type: Input }],
    directionLinks: [{ type: Input }],
    maxSize: [{ type: Input }],
    rotate: [{ type: Input }],
    boundaryLinkNumbers: [{ type: Input }],
    forceEllipses: [{ type: Input }],
    id: [{ type: Input }],
    firstText: [{ type: Input }],
    previousText: [{ type: Input }],
    nextText: [{ type: Input }],
    lastText: [{ type: Input }],
    screenReaderFirstText: [{ type: Input }],
    screenReaderPreviousText: [{ type: Input }],
    screenReaderNextText: [{ type: Input }],
    screenReaderLastText: [{ type: Input }],
    screenReaderPageText: [{ type: Input }],
    screenReaderCurrentPageText: [{ type: Input }],
    screenReaderPaginationLabel: [{ type: Input }],
    className: [{ type: Input }],
    autoHide: [{ type: Input }],
    disabled: [{ type: Input }],
    pageChange: [{ type: Output }]
};
if (false) {
    /**
     * Whether to display First / Last buttons
     * @type {?}
     */
    AngularPaginatorComponent.prototype.boundaryLinks;
    /**
     * Whether to display Previous / Next buttons
     * @type {?}
     */
    AngularPaginatorComponent.prototype.directionLinks;
    /**
     * Limit number for pagination size, i.e., the maximum page numbers to be displayed
     * @type {?}
     */
    AngularPaginatorComponent.prototype.maxSize;
    /**
     * Whether to keep current page in the middle of the visible ones
     * @type {?}
     */
    AngularPaginatorComponent.prototype.rotate;
    /**
     * Whether to always display the first and last page numbers.
     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
     * in-between as necessary. NOTE: max-size refers to the center of the range.
     * This option may add up to 2 more numbers on each side of the displayed range for the end value and
     * what would be an ellipsis but is replaced by a number because it is sequential
     * @type {?}
     */
    AngularPaginatorComponent.prototype.boundaryLinkNumbers;
    /**
     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
     * @type {?}
     */
    AngularPaginatorComponent.prototype.forceEllipses;
    /**
     * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.id;
    /**
     * Text for first button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.firstText;
    /**
     * Text for previous button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.previousText;
    /**
     * Text for next button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.nextText;
    /**
     * Text for last button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.lastText;
    /**
     * Screen reader text for first button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderFirstText;
    /**
     * Screen reader text for previous button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPreviousText;
    /**
     * Screen reader text for next button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderNextText;
    /**
     * Screen reader text for lasr button
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderLastText;
    /**
     * Screen reader text for page numbers
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPageText;
    /**
     * Screen reader text for current page
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderCurrentPageText;
    /**
     * Screen reader text for the pagination component
     * @type {?}
     */
    AngularPaginatorComponent.prototype.screenReaderPaginationLabel;
    /**
     * Adds custom class to the pagination element
     * @type {?}
     */
    AngularPaginatorComponent.prototype.className;
    /**
     * Hides the pagination component if the items are less than `itemsPerPage`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.autoHide;
    /**
     * disables pagination component
     * @type {?}
     */
    AngularPaginatorComponent.prototype.disabled;
    /**
     * Emits an event whenever the current page is changed, It emits the current page number
     *
     * This event is originally picked up from `AngularPaginatorDirective`
     * @type {?}
     */
    AngularPaginatorComponent.prototype.pageChange;
    /** @type {?} */
    AngularPaginatorComponent.prototype._angularPaginatorService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1wYWdpbmF0b3IvIiwic291cmNlcyI6WyJhcHAvYW5ndWxhci1wYWdpbmF0b3IvYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7O0FBWS9FLE1BQU07Ozs7O0lBc0dKLFlBQW9CLHdCQUFpRDtRQUFqRCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQXlCOzs7OzZCQWpHNUMsS0FBSzs7Ozs4QkFJSixJQUFJOzs7O3VCQUlYLENBQUM7Ozs7c0JBSUYsSUFBSTs7Ozs7Ozs7bUNBUVMsS0FBSzs7Ozs2QkFJWCxLQUFLOzs7O3lCQVFULE9BQU87Ozs7NEJBSUosVUFBVTs7Ozt3QkFJZCxNQUFNOzs7O3dCQUlOLE1BQU07Ozs7cUNBSU8sT0FBTzs7Ozt3Q0FJSixVQUFVOzs7O29DQUlkLE1BQU07Ozs7b0NBSU4sTUFBTTs7OztvQ0FJTixNQUFNOzs7OzJDQUlDLGdCQUFnQjs7OzsyQ0FJaEIsWUFBWTs7Ozt3QkFRL0IsS0FBSzs7Ozt3QkFJTCxLQUFLOzs7Ozs7MEJBT29CLElBQUksWUFBWSxFQUFVO0tBTUc7Ozs7SUFFMUUsUUFBUTs7UUFHTixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUM7O1FBRy9ELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQztLQUNyRjs7O1lBdEhGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxneUdBQWlEO2dCQUVqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7Ozs7WUFWUSx1QkFBdUI7Ozs0QkFpQjdCLEtBQUs7NkJBSUwsS0FBSztzQkFJTCxLQUFLO3FCQUlMLEtBQUs7a0NBUUwsS0FBSzs0QkFJTCxLQUFLO2lCQUlMLEtBQUs7d0JBSUwsS0FBSzsyQkFJTCxLQUFLO3VCQUlMLEtBQUs7dUJBSUwsS0FBSztvQ0FJTCxLQUFLO3VDQUlMLEtBQUs7bUNBSUwsS0FBSzttQ0FJTCxLQUFLO21DQUlMLEtBQUs7MENBSUwsS0FBSzswQ0FJTCxLQUFLO3dCQUlMLEtBQUs7dUJBSUwsS0FBSzt1QkFJTCxLQUFLO3lCQU9MLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2FuZ3VsYXItcGFnaW5hdG9yLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgdGhhdCByZW5kZXJzIHRoZSBQYWdpbmF0aW9uIGNvbXBvbmVudCB0ZW1wbGF0ZSwgSXQgYWxzbyBhY2NlcHRzIHRoZSBpbnB1dHMgZm9yIHRoZSBQYWdpbmF0aW9uIGNvbXBvbmVudFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtYW5ndWxhci1wYWdpbmF0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9hbmd1bGFyLXBhZ2luYXRvci5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcblxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQYWdpbmF0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGRpc3BsYXkgRmlyc3QgLyBMYXN0IGJ1dHRvbnNcbiAgICovXG4gIEBJbnB1dCgpIGJvdW5kYXJ5TGlua3MgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzcGxheSBQcmV2aW91cyAvIE5leHQgYnV0dG9uc1xuICAgKi9cbiAgQElucHV0KCkgZGlyZWN0aW9uTGlua3MgPSB0cnVlO1xuICAvKipcbiAgICogTGltaXQgbnVtYmVyIGZvciBwYWdpbmF0aW9uIHNpemUsIGkuZS4sIHRoZSBtYXhpbXVtIHBhZ2UgbnVtYmVycyB0byBiZSBkaXNwbGF5ZWRcbiAgICovXG4gIEBJbnB1dCgpIG1heFNpemUgPSA1O1xuICAvKipcbiAgICogV2hldGhlciB0byBrZWVwIGN1cnJlbnQgcGFnZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSB2aXNpYmxlIG9uZXNcbiAgICovXG4gIEBJbnB1dCgpIHJvdGF0ZSA9IHRydWU7XG4gIC8qKlxuICAgICogV2hldGhlciB0byBhbHdheXMgZGlzcGxheSB0aGUgZmlyc3QgYW5kIGxhc3QgcGFnZSBudW1iZXJzLlxuICAgICogSWYgbWF4LXNpemUgaXMgc21hbGxlciB0aGFuIHRoZSBudW1iZXIgb2YgcGFnZXMsIHRoZW4gdGhlIGZpcnN0IGFuZCBsYXN0IHBhZ2UgbnVtYmVycyBhcmUgc3RpbGwgc2hvd24gd2l0aCBlbGxpcHNlc1xuICAgICogaW4tYmV0d2VlbiBhcyBuZWNlc3NhcnkuIE5PVEU6IG1heC1zaXplIHJlZmVycyB0byB0aGUgY2VudGVyIG9mIHRoZSByYW5nZS5cbiAgICAqIFRoaXMgb3B0aW9uIG1heSBhZGQgdXAgdG8gMiBtb3JlIG51bWJlcnMgb24gZWFjaCBzaWRlIG9mIHRoZSBkaXNwbGF5ZWQgcmFuZ2UgZm9yIHRoZSBlbmQgdmFsdWUgYW5kXG4gICAgKiB3aGF0IHdvdWxkIGJlIGFuIGVsbGlwc2lzIGJ1dCBpcyByZXBsYWNlZCBieSBhIG51bWJlciBiZWNhdXNlIGl0IGlzIHNlcXVlbnRpYWxcbiAgICAqL1xuICBASW5wdXQoKSBib3VuZGFyeUxpbmtOdW1iZXJzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBBbHNvIGRpc3BsYXlzIGVsbGlwc2VzIHdoZW4gcm90YXRlIGlzIHRydWUgYW5kIG1heFNpemUgaXMgc21hbGxlciB0aGFuIHRoZSBudW1iZXIgb2YgcGFnZXMgZm9yY2VFbGxpcHNlc1xuICAgKi9cbiAgQElucHV0KCkgZm9yY2VFbGxpcHNlcyA9IGZhbHNlO1xuICAvKipcbiAgICogVXNlIHVuaXF1ZSBpZCB3aGVuIG11bHRpcGxlIHBhZ2luYXRpb25zIGFyZSBiZWluZyB1c2VkIG9uIHRoZSBzYW1lIHBhZ2UuIEJ5IERlZmF1bHQgUGFnaW5hdG9yIHVzZXMgaWQgYEFOR1VMQVJfUEFHSU5BVE9SX0RFRkFVTFRgXG4gICAqL1xuICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAvKipcbiAgICogVGV4dCBmb3IgZmlyc3QgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBmaXJzdFRleHQgPSAnRmlyc3QnO1xuICAvKipcbiAgICogVGV4dCBmb3IgcHJldmlvdXMgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBwcmV2aW91c1RleHQgPSAnUHJldmlvdXMnO1xuICAvKipcbiAgICogVGV4dCBmb3IgbmV4dCBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIG5leHRUZXh0ID0gJ05leHQnO1xuICAvKipcbiAgICogVGV4dCBmb3IgbGFzdCBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIGxhc3RUZXh0ID0gJ0xhc3QnO1xuICAvKipcbiAgICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciBmaXJzdCBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlckZpcnN0VGV4dCA9ICdGaXJzdCc7XG4gIC8qKlxuICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgcHJldmlvdXMgYnV0dG9uXG4gICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlclByZXZpb3VzVGV4dCA9ICdQcmV2aW91cyc7XG4gIC8qKlxuICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgbmV4dCBidXR0b25cbiAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyTmV4dFRleHQgPSAnTmV4dCc7XG4gIC8qKlxuICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgbGFzciBidXR0b25cbiAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyTGFzdFRleHQgPSAnTGFzdCc7XG4gIC8qKlxuICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgcGFnZSBudW1iZXJzXG4gICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlclBhZ2VUZXh0ID0gJ1BhZ2UnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIGN1cnJlbnQgcGFnZVxuICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJDdXJyZW50UGFnZVRleHQgPSAnWW91YHJlIG9uIHBhZ2UnO1xuICAvKipcbiAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIHRoZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQYWdpbmF0aW9uTGFiZWwgPSAnUGFnaW5hdGlvbic7XG4gIC8qKlxuICAqIEFkZHMgY3VzdG9tIGNsYXNzIHRvIHRoZSBwYWdpbmF0aW9uIGVsZW1lbnRcbiAgKi9cbiAgQElucHV0KCkgY2xhc3NOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnQgaWYgdGhlIGl0ZW1zIGFyZSBsZXNzIHRoYW4gYGl0ZW1zUGVyUGFnZWBcbiAgICovXG4gIEBJbnB1dCgpIGF1dG9IaWRlID0gZmFsc2U7XG4gIC8qKlxuICAgKiBkaXNhYmxlcyBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogRW1pdHMgYW4gZXZlbnQgd2hlbmV2ZXIgdGhlIGN1cnJlbnQgcGFnZSBpcyBjaGFuZ2VkLCBJdCBlbWl0cyB0aGUgY3VycmVudCBwYWdlIG51bWJlclxuICAgKlxuICAgKiBUaGlzIGV2ZW50IGlzIG9yaWdpbmFsbHkgcGlja2VkIHVwIGZyb20gYEFuZ3VsYXJQYWdpbmF0b3JEaXJlY3RpdmVgXG4gICAqL1xuICBAT3V0cHV0KCkgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIF9hbmd1bGFyUGFnaW5hdG9yU2VydmljZSBzZXJ2aWNlIGZvciBhbmd1bGFyIHBhZ2luYXRvclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfYW5ndWxhclBhZ2luYXRvclNlcnZpY2U6IEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcblxuICAgIC8vIHNldCBkZWZhdWx0IGlkIGlmIG5vdCBwcm92aWRlZFxuICAgIHRoaXMuaWQgPSB0aGlzLmlkID8gdGhpcy5pZCA6IHRoaXMuX2FuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlLmlkO1xuXG4gICAgLy8gc2V0IGRlZmF1bHQgY2xhc3MgaWYgbm90IHByb3ZpZGVkXG4gICAgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSA/IHRoaXMuY2xhc3NOYW1lIDogdGhpcy5fYW5ndWxhclBhZ2luYXRvclNlcnZpY2UuaWQ7XG4gIH1cbn1cbiJdfQ==