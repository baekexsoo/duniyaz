/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
import { Subject } from 'rxjs';
/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
export class AngularPaginatorDirective {
    /**
     *
     * @param {?} _angularPaginatorService serivce for angular paginator
     * @param {?} _changeDetectorRef for manual change detection
     */
    constructor(_angularPaginatorService, _changeDetectorRef) {
        this._angularPaginatorService = _angularPaginatorService;
        this._changeDetectorRef = _changeDetectorRef;
        this.firstPage = 1;
        this.pages = [];
        this.subscription = new Subject();
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         */
        this.pageChange = new EventEmitter(true);
        // subscribe to changes
        this.subscription = this._angularPaginatorService.change.subscribe(id => {
            if (id === this.id) {
                this.updatePages();
                this._changeDetectorRef.markForCheck();
            }
        });
    }
    /**
     * Navigate to prevoius page
     * @return {?}
     */
    toPreviousPage() {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    }
    /**
     * Navigate to next page
     * @return {?}
     */
    toNextPage() {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    }
    /**
     * Navigate to first page
     * @return {?}
     */
    toFirstPage() {
        this.setCurrentPage(this.firstPage);
        return;
    }
    /**
     * Navigate to last page
     * @return {?}
     */
    toLastPage() {
        this.setCurrentPage(this.lastPage);
        return;
    }
    /**
     * Sets current page
     *
     * @param {?} page page number to set as currentPage
     * @return {?}
     */
    setCurrentPage(page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    }
    /**
     * create page object used for template
     *
     * @param {?} number page number
     * @param {?} text page number, text to be displayed
     * @param {?} isActive whether the page is active or not, true for currentPage
     * @return {?}
     */
    makePage(number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    }
    /**
     *  create page array
     *
     * @param {?} currentPage current page number
     * @param {?} itemsPerPage total items per page
     * @param {?} totalItems no of items for pagination, usually array length
     * @return {?}
     */
    getPages(currentPage, itemsPerPage, totalItems) {
        /** @type {?} */
        const pages = [];
        /** @type {?} */
        const totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        /** @type {?} */
        let startPage = 1;
        /** @type {?} */
        let endPage = totalPages;
        /** @type {?} */
        const isMaxSized = this.maxSize && this.maxSize < totalPages;
        // recompute if maxSize
        if (isMaxSized) {
            if (this.rotate) {
                // current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                // Visible pages are paginated with maxSize
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                // adjust last page if limit is exceeded
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        // add page number links
        for (let number = startPage; number <= endPage; number++) {
            /** @type {?} */
            const page = this.makePage(number, number, number === currentPage);
            pages.push(page);
        }
        // add links to move between page sets
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning
                    /** @type {?} */
                    const previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential
                        /** @type {?} */
                        const secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    /** @type {?} */
                    const firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end
                    /** @type {?} */
                    const nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential
                        /** @type {?} */
                        const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    /** @type {?} */
                    const lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    /**
     * Updates the pagination component
     * @return {?}
     */
    updatePages() {
        /** @type {?} */
        const instance = this._angularPaginatorService.getInstance(this.id);
        /** @type {?} */
        const correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    }
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param {?} instance instance for which the range is to be corrected
     * @return {?}
     */
    outOfBoundCorrection(instance) {
        /** @type {?} */
        const totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);
        if (totalPages < instance['currentPage'] && 0 < totalPages) {
            return totalPages;
        }
        else if (instance['currentPage'] < 1) {
            return 1;
        }
        return instance['currentPage'];
    }
    /**
     * check if there is any instance registered with the id
     * @return {?}
     */
    isValidId() {
        if (!this._angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isValidId();
        this.updatePages();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** destroy the subscription when the directive is destroyed */
        this.subscription.unsubscribe();
    }
}
AngularPaginatorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'appAngularPaginator, [appAngularPaginator]',
                exportAs: 'angularPaginator'
            },] }
];
/** @nocollapse */
AngularPaginatorDirective.ctorParameters = () => [
    { type: AngularPaginatorService },
    { type: ChangeDetectorRef }
];
AngularPaginatorDirective.propDecorators = {
    boundaryLinks: [{ type: Input }],
    directionLinks: [{ type: Input }],
    maxSize: [{ type: Input }],
    rotate: [{ type: Input }],
    boundaryLinkNumbers: [{ type: Input }],
    forceEllipses: [{ type: Input }],
    id: [{ type: Input }],
    pageChange: [{ type: Output }]
};
if (false) {
    /**
     * Whether to display First / Last buttons
     * @type {?}
     */
    AngularPaginatorDirective.prototype.boundaryLinks;
    /**
     * Whether to display Previous / Next buttons
     * @type {?}
     */
    AngularPaginatorDirective.prototype.directionLinks;
    /**
     * Limit number for pagination size, i.e., the maximum page numbers to be displayed
     * @type {?}
     */
    AngularPaginatorDirective.prototype.maxSize;
    /**
     * Whether to keep current page in the middle of the visible ones
     * @type {?}
     */
    AngularPaginatorDirective.prototype.rotate;
    /**
     * Whether to always display the first and last page numbers.
     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
     * in-between as necessary. NOTE: max-size refers to the center of the range.
     * This option may add up to 2 more numbers on each side of the displayed range for the end value and
     * what would be an ellipsis but is replaced by a number because it is sequential
     * @type {?}
     */
    AngularPaginatorDirective.prototype.boundaryLinkNumbers;
    /**
     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
     * @type {?}
     */
    AngularPaginatorDirective.prototype.forceEllipses;
    /**
     * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
     * @type {?}
     */
    AngularPaginatorDirective.prototype.id;
    /** @type {?} */
    AngularPaginatorDirective.prototype.currentPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.firstPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.lastPage;
    /** @type {?} */
    AngularPaginatorDirective.prototype.pages;
    /** @type {?} */
    AngularPaginatorDirective.prototype.subscription;
    /**
     * Emits an event whenever the current page is changed, It emits the current page number
     * @type {?}
     */
    AngularPaginatorDirective.prototype.pageChange;
    /** @type {?} */
    AngularPaginatorDirective.prototype._angularPaginatorService;
    /** @type {?} */
    AngularPaginatorDirective.prototype._changeDetectorRef;
}

//# sourceMappingURL=data:application/json;base64,